name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.2, 8.3, 8.4]
        include:
          - php: 8.4
            coverage: true

    name: PHP ${{ matrix.php }} Tests

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: json, dom, curl, libxml, mbstring, zip, pdo, pdo_mysql
          tools: composer:v2
          coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Cache PHP dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: php-${{ matrix.php }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            php-${{ matrix.php }}-composer-
            php-composer-

      - name: Install PHP dependencies
        run: composer install --no-interaction --no-progress --ansi --prefer-dist

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Setup Problem Matchers
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Prepare Laravel Application
        run: |
          cp .env.example .env
          php artisan key:generate --ansi
          php artisan config:cache
          php artisan route:cache
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Run Database Migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Run Tests
        run: composer test -- ${{ matrix.coverage && '--coverage-clover coverage.xml' || '' }}
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Upload Coverage Reports
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: json, dom, curl, libxml, mbstring, zip
          tools: composer:v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Cache PHP dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: php-8.4-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            php-8.4-composer-
            php-composer-

      - name: Install PHP dependencies
        run: composer install --no-interaction --no-progress --ansi --prefer-dist

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run PHP Linting
        run: composer test:lint

      - name: Run PHP Static Analysis
        run: composer test:types

      - name: Run Rector (Dry Run)
        run: composer test:rector

      - name: Run JavaScript/TypeScript Linting
        run: npm run lint

      - name: Check Code Formatting
        run: npm run format:check
